{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Report</h1>
    <h2 id="kmom01"> kmom01 </h2>
<p>
Jag har tidigare erfarenhet av webbutveckling med JavaScript och PHP, vilket har gett mig en grundläggande förståelse för programmering och webbutveckling.</p>

<p>Att organisera klasser med namespaces och använda autoloading för att automatiskt ladda klassfiler bidrar till en bättre struktur och underhåll av kodbasen.
</p>

<p>TIL för detta kmom
Idag lärde jag mig om vikten av att följa MVC-arkitekturen för att organisera koden på ett strukturerat sätt och underlätta underhållet och utvecklingen av webbapplikationer i PHP.
</p>    
     
    <h2 id="kmom02"> kmom02 </h2>

    <p>I detta kursmoment har jag skapat ett interaktivt kortspel med Symfony. Spelet innehåller följande funktioner:</p>
    <ul>
        <li>Visa en komplett kortlek med 52 kort</li>

        <li>Blanda kortleken</li>

        <li>Dra ett eller flera kort från leken</li>

        <li>Inspektera sessionens innehåll</li>

        <li>Återställa spelet till ursprungligt</li>
    </ul>
    <p>Kortleken sparas i sessionen, vilket gör att systemet minns vilka kort som har dragits. Jag implementerade en Deck-klass som ansvarar för:</p>
    <ul>
        <li>Blandning av kortleken</li>

        <li>Dragning av kort (enstaka eller flera)</li>

        <li>Hantering av kvarvarande kort</li>
    </ul>

    <p>Användargränssnittet erbjuder en översiktlig startsida med direktåtkomst till alla funktioner.
     Dessutom utvecklade jag ett JSON API för programmatisk åtkomst till kortleken.</p>
    <p>Genom arbetet har jag fått praktisk erfarenhet av:</p>
    <ul>
        <li>Symfony-ramverket

        <li>Sessionhantering</li>

        <li>Objektorienterad PHP-programmering</li>

        <li>API-design</li>

        <li>Användning av flash-meddelanden</li>
    </ul>

<p>
lärt mig:

Grundläggande Symfony, Skapa olika sidor, Använda templates, Sessioner, Spara vilka kort som dragits

Hålla koll på spelets tillstånd, Objektorientering, Skapa en kortleksklass

Använda metoder för att blanda och dra kort
</p>




<h2>kmom03</h2>

<p>
I detta kursmoment har jag utvecklat spelet <strong>Kortspel 21</strong> i Symfony. Arbetet har inkluderat både backend-logik och frontend-gränssnitt.
</p>

<h3>Vad jag har jobbat med i koden</h3>
<ul>
    <li>Skapade nya kontroller för att hantera spelets rutter: <code>game_start</code>, <code>game_play</code>, <code>game_hit</code>, <code>game_stand</code> och <code>game_new</code>.</li>
    <li>Implementerade objektorienterade klasser: <code>Card</code>, <code>Deck</code>, <code>Hand</code>, <code>Player</code>, <code>Dealer</code> och <code>Game</code>.</li>
    <li>Byggde spelmekaniken i <code>Game</code>-klassen för att hantera turordning, poängräkning och vinnare.</li>
    <li>Använde PHP-sessioner för att lagra spelets tillstånd mellan sidladdningar.</li>
    <li>Skapade Twig-templates för landningssida (<code>index.html.twig</code>), spelvy (<code>play.html.twig</code>) och dokumentationssida (<code>doc.html.twig</code>).</li>
    <li>Implementerade loopar och villkorssatser i Twig för att visa kort och hantera spelstatus.</li>
</ul>

<p>Vad jag har lärt mig: </p>
<ul>
    <li>Hur man strukturerar ett Symfony-projekt enligt MVC-principen för att hålla kontrollern tunn och logiken i separata klasser.</li>
    <li>Praktisk användning av Twig för att bygga dynamiska vyer med loopar och villkor.</li>
    <li>Sessionhantering i Symfony för att lagra speldata mellan förfrågningar.</li>
    <li>Att bryta ner problem i mindre delar med hjälp av flödesschema och pseudokod innan implementation.</li>
    <li>Hur man kombinerar objektorienterad programmering med webbapplikationer för att skapa en fungerande spelupplevelse.</li>
</ul>

<p>
Genom detta moment har jag fördjupat min förståelse för Symfony och fått erfarenhet av att bygga ett komplett interaktivt spel från grunden, inklusive spelregler, grafik och logik.
</p>

{% endblock %}
