{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Report</h1>
    <h2 id="kmom01"> kmom01 </h2>
<p>
Jag har tidigare erfarenhet av webbutveckling med JavaScript och PHP, vilket har gett mig en grundläggande förståelse för programmering och webbutveckling.</p>

<p>Att organisera klasser med namespaces och använda autoloading för att automatiskt ladda klassfiler bidrar till en bättre struktur och underhåll av kodbasen.
</p>

<p>TIL för detta kmom
Idag lärde jag mig om vikten av att följa MVC-arkitekturen för att organisera koden på ett strukturerat sätt och underlätta underhållet och utvecklingen av webbapplikationer i PHP.
</p>    
     
    <h2 id="kmom02"> kmom02 </h2>

    <p>I detta kursmoment har jag skapat ett interaktivt kortspel med Symfony. Spelet innehåller följande funktioner:</p>
    <ul>
        <li>Visa en komplett kortlek med 52 kort</li>

        <li>Blanda kortleken</li>

        <li>Dra ett eller flera kort från leken</li>

        <li>Inspektera sessionens innehåll</li>

        <li>Återställa spelet till ursprungligt</li>
    </ul>
    <p>Kortleken sparas i sessionen, vilket gör att systemet minns vilka kort som har dragits. Jag implementerade en Deck-klass som ansvarar för:</p>
    <ul>
        <li>Blandning av kortleken</li>

        <li>Dragning av kort (enstaka eller flera)</li>

        <li>Hantering av kvarvarande kort</li>
    </ul>

    <p>Användargränssnittet erbjuder en översiktlig startsida med direktåtkomst till alla funktioner.
     Dessutom utvecklade jag ett JSON API för programmatisk åtkomst till kortleken.</p>
    <p>Genom arbetet har jag fått praktisk erfarenhet av:</p>
    <ul>
        <li>Symfony-ramverket

        <li>Sessionhantering</li>

        <li>Objektorienterad PHP-programmering</li>

        <li>API-design</li>

        <li>Användning av flash-meddelanden</li>
    </ul>

<p>
lärt mig:

Grundläggande Symfony, Skapa olika sidor, Använda templates, Sessioner, Spara vilka kort som dragits

Hålla koll på spelets tillstånd, Objektorientering, Skapa en kortleksklass

Använda metoder för att blanda och dra kort
</p>




<h2>kmom03</h2>

<p>
I detta kursmoment har jag utvecklat spelet <strong>Kortspel 21</strong> i Symfony. Arbetet har inkluderat både backend-logik och frontend-gränssnitt.
</p>

<h3>Vad jag har jobbat med i koden</h3>
<p>
Fixade alla routes och kontroller så att spelet kunde starta, man kan dra kort, stanna och börja om.</p>
<p>
Byggde upp ett system med klasser för korten, leken, spelaren och dealern. All logik för spelet sitter i en Game-klass.</p>
<p>
Använde sessions för att komma ihåg spelets tillstånd mellan sidladdningarna. Det var lite knepigt att få till, men funkar nu.</p>
<p>
Skapade vyerna med Twig. Fick loopa ut korten och göra villkorssatser för att visa olika knappar och meddelanden.
</p>

<p>Vad jag har lärt mig: </p>
<p>Fick en bättre koll på hur man strukturerar ett Symfony-projekt på riktigt.
</p>
<p>Förstår sessions bättre nu hur man sparar hela objekt och hämtar dem igen.
</p>
<p>Blivit mycket bättre på att använda Twig och skriva tydligare kod.
</p>


<h2>kmom04</h2>

<p>
Det här kmom handlade om enhetstestning med PHPUnit i Symfony. Jag fick i uppdrag att testa mina klasser från kortspelet och nå hög kodtäckning.
</p>

<h4>Vad jag gjorde:</h4>
<p>Installerade och konfigurerade PHPUnit med Xdebug för kodtäckning</p>
<p>Skapade en test suite med 37 testfall.</p>
<p>Implementerade tester för Card, Deck, Player, Hand, Dealer och Game-klasser</p>

<h4>Vad jag lärde mig:</h4>

<p>
Hur man skriver effektiva testfall med PHPUnit</p>

<p>
Vikten av att testa edge cases och olika scenarier</p>

<p>
Hur man mäter och analyserar kodtäckning</p>

<p>
Att enhetstester gör koden mer robust och underhållbar</p>

<p>
Hur man automatisera kodkvalitetskontroller</p>


<h4>Resultat:</h4>
<p>Alla tester passerar och kodtäckningen är godkänd. Har nu en solid testmiljö som gör 
det enkelt att vidareutveckla kortspelet utan att bryta befintlig funktionalitet.
</p>

{% endblock %}
